{
    "pipes": [],
    "interfaces": [
        {
            "name": "DynamicFormModel",
            "id": "interface-DynamicFormModel-ae86eda56bdc8be382fa26fd7d0b7638ab24f3068f3b999e58147106d1b3c08704e190ddd78481191613cb74a49cff02f1f03569eb50c0dc45f897ad2c764276",
            "file": "src/app/shared/dynamic-form/models/dynamic-form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FormBuilderJsonModel {\n    form: DynamicFormModel;\n    steps: number;\n    current: number;\n    fieldErrors: FieldErrors;\n    errors: any[];\n}\n\ninterface FieldErrors {\n}\n\nexport interface DynamicFormModel {\n    name: string;\n    title: string;\n    submitLabel: string;\n    nestedFormShowType: string;\n    fieldDescriptionShowType: string;\n    fields: FieldModel[];\n    forms: any[];\n}\n\nexport interface FieldModel {\n    '@type': string;\n    name: string;\n    title: string;\n    description: string;\n    errorMessage: string;\n    required: boolean;\n    minLength: number;\n    maxLength: number;\n    type: string;\n    descriptionShowType?: string;\n    regex?: string;\n    info?: string;\n    showConfirmPassword?: boolean;\n}\n\nexport interface SubmitFormModel {\n    identifier: string;\n    username: string;\n    first_name: string;\n    last_name: string;\n    confirmPassword: string;\n    newPassword: string;\n}",
            "properties": [
                {
                    "name": "fieldDescriptionShowType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FieldModel[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "forms",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "nestedFormShowType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "submitLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FieldErrors",
            "id": "interface-FieldErrors-ae86eda56bdc8be382fa26fd7d0b7638ab24f3068f3b999e58147106d1b3c08704e190ddd78481191613cb74a49cff02f1f03569eb50c0dc45f897ad2c764276",
            "file": "src/app/shared/dynamic-form/models/dynamic-form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FormBuilderJsonModel {\n    form: DynamicFormModel;\n    steps: number;\n    current: number;\n    fieldErrors: FieldErrors;\n    errors: any[];\n}\n\ninterface FieldErrors {\n}\n\nexport interface DynamicFormModel {\n    name: string;\n    title: string;\n    submitLabel: string;\n    nestedFormShowType: string;\n    fieldDescriptionShowType: string;\n    fields: FieldModel[];\n    forms: any[];\n}\n\nexport interface FieldModel {\n    '@type': string;\n    name: string;\n    title: string;\n    description: string;\n    errorMessage: string;\n    required: boolean;\n    minLength: number;\n    maxLength: number;\n    type: string;\n    descriptionShowType?: string;\n    regex?: string;\n    info?: string;\n    showConfirmPassword?: boolean;\n}\n\nexport interface SubmitFormModel {\n    identifier: string;\n    username: string;\n    first_name: string;\n    last_name: string;\n    confirmPassword: string;\n    newPassword: string;\n}",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": []
        },
        {
            "name": "FieldModel",
            "id": "interface-FieldModel-ae86eda56bdc8be382fa26fd7d0b7638ab24f3068f3b999e58147106d1b3c08704e190ddd78481191613cb74a49cff02f1f03569eb50c0dc45f897ad2c764276",
            "file": "src/app/shared/dynamic-form/models/dynamic-form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FormBuilderJsonModel {\n    form: DynamicFormModel;\n    steps: number;\n    current: number;\n    fieldErrors: FieldErrors;\n    errors: any[];\n}\n\ninterface FieldErrors {\n}\n\nexport interface DynamicFormModel {\n    name: string;\n    title: string;\n    submitLabel: string;\n    nestedFormShowType: string;\n    fieldDescriptionShowType: string;\n    fields: FieldModel[];\n    forms: any[];\n}\n\nexport interface FieldModel {\n    '@type': string;\n    name: string;\n    title: string;\n    description: string;\n    errorMessage: string;\n    required: boolean;\n    minLength: number;\n    maxLength: number;\n    type: string;\n    descriptionShowType?: string;\n    regex?: string;\n    info?: string;\n    showConfirmPassword?: boolean;\n}\n\nexport interface SubmitFormModel {\n    identifier: string;\n    username: string;\n    first_name: string;\n    last_name: string;\n    confirmPassword: string;\n    newPassword: string;\n}",
            "properties": [
                {
                    "name": "@type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "descriptionShowType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "info",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "maxLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "minLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "regex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "showConfirmPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FormBuilderJsonModel",
            "id": "interface-FormBuilderJsonModel-ae86eda56bdc8be382fa26fd7d0b7638ab24f3068f3b999e58147106d1b3c08704e190ddd78481191613cb74a49cff02f1f03569eb50c0dc45f897ad2c764276",
            "file": "src/app/shared/dynamic-form/models/dynamic-form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FormBuilderJsonModel {\n    form: DynamicFormModel;\n    steps: number;\n    current: number;\n    fieldErrors: FieldErrors;\n    errors: any[];\n}\n\ninterface FieldErrors {\n}\n\nexport interface DynamicFormModel {\n    name: string;\n    title: string;\n    submitLabel: string;\n    nestedFormShowType: string;\n    fieldDescriptionShowType: string;\n    fields: FieldModel[];\n    forms: any[];\n}\n\nexport interface FieldModel {\n    '@type': string;\n    name: string;\n    title: string;\n    description: string;\n    errorMessage: string;\n    required: boolean;\n    minLength: number;\n    maxLength: number;\n    type: string;\n    descriptionShowType?: string;\n    regex?: string;\n    info?: string;\n    showConfirmPassword?: boolean;\n}\n\nexport interface SubmitFormModel {\n    identifier: string;\n    username: string;\n    first_name: string;\n    last_name: string;\n    confirmPassword: string;\n    newPassword: string;\n}",
            "properties": [
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "fieldErrors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FieldErrors",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormModel",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "steps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SubmitFormModel",
            "id": "interface-SubmitFormModel-ae86eda56bdc8be382fa26fd7d0b7638ab24f3068f3b999e58147106d1b3c08704e190ddd78481191613cb74a49cff02f1f03569eb50c0dc45f897ad2c764276",
            "file": "src/app/shared/dynamic-form/models/dynamic-form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FormBuilderJsonModel {\n    form: DynamicFormModel;\n    steps: number;\n    current: number;\n    fieldErrors: FieldErrors;\n    errors: any[];\n}\n\ninterface FieldErrors {\n}\n\nexport interface DynamicFormModel {\n    name: string;\n    title: string;\n    submitLabel: string;\n    nestedFormShowType: string;\n    fieldDescriptionShowType: string;\n    fields: FieldModel[];\n    forms: any[];\n}\n\nexport interface FieldModel {\n    '@type': string;\n    name: string;\n    title: string;\n    description: string;\n    errorMessage: string;\n    required: boolean;\n    minLength: number;\n    maxLength: number;\n    type: string;\n    descriptionShowType?: string;\n    regex?: string;\n    info?: string;\n    showConfirmPassword?: boolean;\n}\n\nexport interface SubmitFormModel {\n    identifier: string;\n    username: string;\n    first_name: string;\n    last_name: string;\n    confirmPassword: string;\n    newPassword: string;\n}",
            "properties": [
                {
                    "name": "confirmPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "first_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "identifier",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "last_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "newPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "DynamicFormService",
            "id": "injectable-DynamicFormService-3895e95cbabb6037db9b0232461b4bdb79aa2b7a43db484a786fb212d1a8a5bd16d3f9c4219fcc765fc532fe99a259e893bd259e8e87107dfa0f331556c652a8",
            "file": "src/app/shared/dynamic-form/services/dynamic-form.service.ts",
            "properties": [
                {
                    "name": "_apiUrl",
                    "defaultValue": "'https://accounts.mail.ir/app/sign-up'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "formJsonUrl",
                    "defaultValue": "'assets/form-json-data.json'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getApiUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFormJson",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<FormBuilderJsonModel>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitForm",
                    "args": [
                        {
                            "name": "data",
                            "type": "SubmitFormModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SubmitFormModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { FormBuilderJsonModel, SubmitFormModel } from '../models/dynamic-form.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DynamicFormService {\n  public formJsonUrl = 'assets/form-json-data.json';\n  private _apiUrl = 'https://accounts.mail.ir/app/sign-up'\n\n  constructor(\n    private _http: HttpClient\n  ) { }\n\n  getApiUrl() {\n    return this._apiUrl\n  }\n  getFormJson(): Observable<FormBuilderJsonModel> {\n    return this._http.get<FormBuilderJsonModel>(this.formJsonUrl)\n  }\n\n  submitForm(data: SubmitFormModel): Observable<any> {\n    return this._http.post(this._apiUrl, data)\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-aadad98da6a8f87072c5cb23d968790399dbeb347cacf27d34784f3814870f553e4d3cc9da186feba1584903a3511e944e75b99f50b22398881a182bd59d1aa9",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'chaapaar-task'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  imports: [RouterOutlet],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss'\n})\nexport class AppComponent {\n  title = 'chaapaar-task';\n}\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<router-outlet></router-outlet>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #1ea7fd;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "DynamicFormComponent",
            "id": "component-DynamicFormComponent-caa08310e43a9ef882456de38c0847aae6547feb3b6a0234db409f343e3fdb01e46033cd6aa7ee4f54966fef9e6a9c34552708457248cd55fa81c0d126378561",
            "file": "src/app/shared/dynamic-form/dynamic-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dynamic-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "formJsonData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "DynamicFormModel",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onSubmit",
                    "defaultValue": "new EventEmitter<SubmitFormModel>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_formBuilder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormBuilder",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "confirmPasswordFieldName",
                    "defaultValue": "'confirmPassword'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "confirmPasswordLabel",
                    "defaultValue": "'Confirm Password'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "passwordFieldName",
                    "defaultValue": "'password'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "passwordMismatchErrorMessage",
                    "defaultValue": "\"Password Doesn't Match\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "showConfirmPassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "showPassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "addFormControlValidations",
                    "args": [
                        {
                            "name": "field",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkIdenticalPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createFormGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleApiErrors",
                    "args": [
                        {
                            "name": "apiResponse",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "apiResponse",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatButton"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { DynamicFormService } from './services/dynamic-form.service';\nimport { DynamicFormModel, SubmitFormModel } from './models/dynamic-form.model';\nimport { Subscription } from 'rxjs';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButton } from '@angular/material/button';\n\n@Component({\n  selector: 'app-dynamic-form',\n  imports: [\n    ReactiveFormsModule,\n    MatTooltipModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatButton\n  ],\n  templateUrl: './dynamic-form.component.html',\n  styleUrl: './dynamic-form.component.scss'\n})\nexport class DynamicFormComponent {\n  @Input() formJsonData!: DynamicFormModel;\n  @Output() onSubmit = new EventEmitter<SubmitFormModel>();\n  formGroup: FormGroup = new FormGroup({});\n  subscriptions: Subscription[] = [];\n  showPassword: boolean = false;\n  showConfirmPassword: boolean = false;\n  passwordFieldName: string = 'password';\n\n  // Confirm Password Fields' Static Labels\n  confirmPasswordFieldName: string = 'confirmPassword';\n  confirmPasswordLabel: string = 'Confirm Password';\n  passwordMismatchErrorMessage: string = \"Password Doesn't Match\";\n\n  constructor(\n    public _formBuilder: FormBuilder,\n    private _dynamicFormService: DynamicFormService\n  ) { }\n\n  ngOnInit() {\n    this.createFormGroup();\n  }\n\n  createFormGroup() {\n    const formGroup: any = {};\n    this.formJsonData.fields.forEach(field => {\n      if (field.type === 'NEW_PASSWORD' && field.showConfirmPassword) {\n        formGroup[this.confirmPasswordFieldName] = ['', Validators.required]\n        this.passwordFieldName = field.name\n      }\n      formGroup[field.name] = ['', this.addFormControlValidations(field)]\n    })\n    this.formGroup = this._formBuilder.group(formGroup)\n  }\n\n  addFormControlValidations(field: any) {\n    const validations: any = [];\n    if (field.required) validations.push(Validators.required);\n    if (field.regex) validations.push(Validators.pattern(field.regex));\n    if (field.minLength) validations.push(Validators.minLength(field.minLength));\n    if (field.maxLength) validations.push(Validators.maxLength(field.maxLength));\n    return validations\n  }\n\n  checkIdenticalPassword() {\n    let password = this.formGroup.controls[this.passwordFieldName].value\n    let confirmPassword = this.formGroup.controls[this.confirmPasswordFieldName].value\n    if (password !== confirmPassword) {\n      this.formGroup.controls[this.confirmPasswordFieldName].setErrors({ passwordMismatch: true });\n    } else {\n      this.formGroup.controls[this.confirmPasswordFieldName].setErrors(null);\n    }\n  }\n\n  handleApiErrors(apiResponse: any) {\n    if (apiResponse.fieldErrors) {\n      for (const field in apiResponse.fieldErrors) {\n        if (this.formGroup.controls[field]) {\n          this.formGroup.controls[field].setErrors({ apiError: apiResponse.fieldErrors[field] });\n        }\n      }\n    }\n  }\n\n  submit() {\n    this.onSubmit.emit(this.formGroup.value)\n  }\n}\n",
            "styleUrl": "./dynamic-form.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_dynamicFormService",
                        "type": "DynamicFormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_dynamicFormService",
                        "type": "DynamicFormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"flex flex-col justify-center items-center h-full min-h-screen bg-gray-400\">\n  <form [formGroup]=\"formGroup\" (submit)=\"submit()\" class=\"w-full max-w-lg px-4 sm:px-6 lg:px-8\">\n    <div class=\"flex flex-col gap-6 justify-center items-center p-8 sm:p-12 bg-gray-800 rounded-2xl shadow-md\">\n      <h1 class=\"text-xl sm:text-2xl lg:text-3xl text-white font-bold text-center\">\n        {{formJsonData.title}}\n      </h1>\n      @for (field of formJsonData.fields; track field) {\n        <div class=\"flex justify-between items-center gap-4 w-full relative\">\n            <mat-form-field class=\"w-full\">\n                <mat-label>{{ field.title }}</mat-label>\n                <input\n                  matInput\n                  [type]=\"field.type === 'NEW_PASSWORD' ? (showPassword ? 'text' : 'password') : field.type\"\n                  [formControlName]=\"field.name\"\n                  [matTooltip]=\"field.description\"\n                  matTooltipPosition=\"right\"\n                  [minLength]=\"field.minLength\"\n                  [maxLength]=\"field.maxLength\"\n                  (change)=\"(field.type === 'NEW_PASSWORD' && field.showConfirmPassword) ? checkIdenticalPassword() : null\"\n                />\n                @if (formGroup.controls[field.name].hasError('apiError')){\n                    <mat-error>{{ formGroup.controls[field.name].getError('apiError') }}</mat-error>\n                }\n                @if (formGroup.controls[field.name].invalid && !formGroup.controls[field.name].hasError('apiError')) {\n                    <mat-error>{{ field.errorMessage }}</mat-error>\n                }\n                @if (field.type === 'NEW_PASSWORD') {\n                    <mat-icon\n                      (click)=\"showPassword = !showPassword\"\n                      aria-hidden=\"false\"\n                      aria-label=\"Example visibility icon\"\n                      [fontIcon]=\"showPassword ? 'visibility' : 'visibility_off'\"\n                      class=\"cursor-pointer visibility\"\n                    ></mat-icon>\n                }\n            </mat-form-field>\n            @if (field.info) {\n                <mat-icon\n                  aria-hidden=\"false\"\n                  aria-label=\"Example info icon\"\n                  fontIcon=\"info\"\n                  [matTooltip]=\"field.info\"\n                  matTooltipPosition=\"below\"\n                  class=\"cursor-pointer text-white info-icon\"\n                ></mat-icon>\n            }\n        </div>\n        @if (field.type === \"NEW_PASSWORD\" && field.showConfirmPassword){\n            <div class=\"flex justify-between items-center gap-4 w-full\">\n                <mat-form-field class=\"w-full\">\n                    <mat-label>{{ confirmPasswordLabel }}</mat-label>\n                    <input\n                      matInput\n                      [type]=\"showConfirmPassword ? 'text' : 'password'\"\n                      [formControlName]=\"confirmPasswordFieldName\"\n                      (change)=\"checkIdenticalPassword()\"\n                    />\n                    @if (formGroup.get(confirmPasswordFieldName)?.hasError('passwordMismatch')) {\n                        <mat-error>{{ passwordMismatchErrorMessage }}</mat-error>\n                    }\n                    <mat-icon\n                      (click)=\"showConfirmPassword = !showConfirmPassword\"\n                      aria-hidden=\"false\"\n                      aria-label=\"Example visibility icon\"\n                      [fontIcon]=\"showConfirmPassword ? 'visibility' : 'visibility_off'\"\n                      class=\"cursor-pointer visibility\"\n                    ></mat-icon>\n                </mat-form-field>\n            </div>\n        }\n      }\n      <button\n        type=\"submit\"\n        mat-button\n        [disabled]=\"!formGroup.valid\"\n        class=\"w-full text-sm sm:text-base lg:text-lg \"\n      >\n        {{formJsonData.submitLabel}}\n      </button>\n    </div>\n  </form>\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: #1ea7fd;\n  text-decoration: none;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #66bf3c;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "SignUpComponent",
            "id": "component-SignUpComponent-34b7e0ca4acef9b32230ce3382af3152be2121951f210367bd53b5a4cbd7142f50900393a2d4352cff674e2a379ad9d5944763d3055d7908abf0e2e8bf738b91",
            "file": "src/app/pages/sign-up/sign-up.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-up",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sign-up.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dynamicForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormComponent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dynamicForm'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "formJsonData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormModel",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "getFormJson",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "requestBody",
                            "type": "SubmitFormModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "requestBody",
                            "type": "SubmitFormModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "DynamicFormComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild } from '@angular/core';\nimport { DynamicFormComponent } from '../../shared/dynamic-form/dynamic-form.component';\nimport { DynamicFormService } from '../../shared/dynamic-form/services/dynamic-form.service';\nimport { DynamicFormModel, SubmitFormModel } from '../../shared/dynamic-form/models/dynamic-form.model';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-sign-up',\n  imports: [DynamicFormComponent],\n  templateUrl: './sign-up.component.html',\n  styleUrl: './sign-up.component.scss'\n})\nexport class SignUpComponent {\n  @ViewChild('dynamicForm') dynamicForm!: DynamicFormComponent\n\n  formJsonData!: DynamicFormModel\n  subscriptions: Subscription[] = [];\n\n  constructor(\n    private _dynamicFormService: DynamicFormService\n  ) { }\n\n  ngOnInit(): void {\n    this.getFormJson()\n  }\n  getFormJson() {\n    let getData = this._dynamicFormService.getFormJson().subscribe(res => {\n      if (res) {\n        this.formJsonData = res.form;\n      } else {\n        alert('Something went wrong')\n      }\n    })\n    this.subscriptions.push(getData)\n  }\n\n  onSubmit(requestBody: SubmitFormModel) {\n    let sub = this._dynamicFormService.submitForm(requestBody).subscribe({\n      next: (resp) => {\n        console.log(resp)\n      },\n      error: (errorResponse) => {\n        this.dynamicForm.handleApiErrors(errorResponse)\n      }\n    })\n    this.subscriptions.push(sub)\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe())\n  }\n}\n",
            "styleUrl": "./sign-up.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_dynamicFormService",
                        "type": "DynamicFormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "_dynamicFormService",
                        "type": "DynamicFormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "@if (formJsonData){\n    <app-dynamic-form [formJsonData]=\"formJsonData\" (onSubmit)=\"onSubmit($event)\"></app-dynamic-form>\n}"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes),\n  provideHttpClient(withInterceptors([errorInterceptor])), provideAnimationsAsync(), provideAnimationsAsync()]\n}"
            },
            {
                "name": "errorInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/error.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> => {\n    const snackBar = inject(MatSnackBar);\n\n    return next(req).pipe(\n        catchError((error: HttpErrorResponse) => {\n            let errorMessage = 'An unexpected error occurred';\n\n            switch (error.status) {\n                case 400:\n                    errorMessage = \"Check your input\";\n                    break;\n                case 401:\n                    errorMessage = \"Please log in first\";\n                    break;\n                case 403:\n                    errorMessage = \"You don't have permission to access this resource\";\n                    break;\n                case 404:\n                    errorMessage = \"Resource doen't exist\";\n                    break;\n                case 500:\n                    errorMessage = \"Internal server error, try again later ...\";\n                    break;\n            }\n\n            snackBar.open(errorMessage, 'Close', {\n                duration: 3000,\n                verticalPosition: 'top'\n            });\n\n            return throwError(() => error);\n        })\n    );\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes),\n  provideHttpClient(withInterceptors([errorInterceptor])), provideAnimationsAsync(), provideAnimationsAsync()]\n}"
                }
            ],
            "src/app/core/interceptors/error.interceptor.ts": [
                {
                    "name": "errorInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/error.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> => {\n    const snackBar = inject(MatSnackBar);\n\n    return next(req).pipe(\n        catchError((error: HttpErrorResponse) => {\n            let errorMessage = 'An unexpected error occurred';\n\n            switch (error.status) {\n                case 400:\n                    errorMessage = \"Check your input\";\n                    break;\n                case 401:\n                    errorMessage = \"Please log in first\";\n                    break;\n                case 403:\n                    errorMessage = \"You don't have permission to access this resource\";\n                    break;\n                case 404:\n                    errorMessage = \"Resource doen't exist\";\n                    break;\n                case 500:\n                    errorMessage = \"Internal server error, try again later ...\";\n                    break;\n            }\n\n            snackBar.open(errorMessage, 'Close', {\n                duration: 3000,\n                verticalPosition: 'top'\n            });\n\n            return throwError(() => error);\n        })\n    );\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 5,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/error.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "errorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/sign-up/sign-up.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/dynamic-form/dynamic-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/dynamic-form/models/dynamic-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicFormModel",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/dynamic-form/models/dynamic-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FieldErrors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/dynamic-form/models/dynamic-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FieldModel",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/dynamic-form/models/dynamic-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormBuilderJsonModel",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/dynamic-form/models/dynamic-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SubmitFormModel",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/dynamic-form/services/dynamic-form.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DynamicFormService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}